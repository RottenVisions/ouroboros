// 2017-2019 Rotten Visions, LLC. https://www.rottenvisions.com


#ifndef OURO_PROXY_H
#define OURO_PROXY_H
	
#include "entity.h"
#include "data_downloads.h"
#include "common/common.h"
#include "helper/debug_helper.h"
#include "network/address.h"
#include "network/message_handler.h"
	
namespace Ouroboros{


namespace Network
{
class Channel;
}

class ProxyForwarder;

#define LOG_ON_REJECT  0
#define LOG_ON_ACCEPT  1
#define LOG_ON_WAIT_FOR_DESTROY 2

class Proxy : public Entity
{
		/** Subclassing populates some py operations into derived classes*/
	BASE_SCRIPT_HREADER(Proxy, Entity)

public:
	Proxy(ENTITY_ID id, const ScriptDefModule* pScriptModule);
	~Proxy();
	
	INLINE void addr(const Network::Address& address);
	INLINE const Network::Address& addr() const;

	typedef std::vector<Network::Bundle*> Bundles;
	bool pushBundle(Network::Bundle* pBundle);

	/**
		Push a message to the witness client
	*/
	bool sendToClient(const Network::MessageHandler& msgHandler, Network::Bundle* pBundle);
	bool sendToClient(Network::Bundle* pBundle, bool immediately = false);
	bool sendToClient(bool expectData = true);

	/** 
		The script requests to get the rtt value of the connection
	*/
	double getRoundTripTime() const;
	DECLARE_PY_GET_MOTHOD(pyGetRoundTripTime);

	/** 
		This is the number of seconds since a packet from the client was last received. 
	*/
	double getTimeSinceHeardFromClient() const;
	DECLARE_PY_GET_MOTHOD(pyGetTimeSinceHeardFromClient);

	/** 
		The script requests to get a client bound to the proxy
	*/
	bool hasClient() const;
	DECLARE_PY_GET_MOTHOD(pyHasClient);

	/** 
		Script request to get the client address
	*/
	DECLARE_PY_GET_MOTHOD(pyClientAddr);

	/** 
		Whether the entity is available
	*/
	INLINE bool clientEnabled() const;
	DECLARE_PY_GET_MOTHOD(pyGetClientEnabled);

	/**
		This entity is activated. This method is called after the client initializes the corresponding entity.
	*/
	void onClientEnabled(void);
	
	/**
		A data download task is completed
	*/
	void onStreamComplete(int16 id, bool success);

	/**
		Login attempt, when the normal login fails, call this interface and try again
	*/
	int32 onLogOnAttempt(const char* addr, uint32 port, const char* password);
	
	/**
		Initialize the properties of the client proxy
	*/
	void initClientBasePropertys();
	void initClientCellPropertys();

	/** 
		Called when the client socket corresponding to the entity is disconnected
	*/
	void onClientDeath(void);
	
		/** Network Interface
		Called when the cell of the entity associated with the client is created
	*/
	void onClientGetCell(Network::Channel* pChannel, COMPONENT_ID componentID);

	/**
		Get the front end category
	*/
	INLINE COMPONENT_CLIENT_TYPE getClientType() const;
	INLINE void setClientType(COMPONENT_CLIENT_TYPE ctype);
	DECLARE_PY_MOTHOD_ARG0(pyGetClientType);

	/**
		Disconnect client connection
	*/
	DECLARE_PY_MOTHOD_ARG0(pyDisconnect);

	/**
		Get data attached to the front end
	*/
	INLINE const std::string& getLoginDatas();
	INLINE void setLoginDatas(const std::string& datas);
	
	INLINE const std::string& getCreateDatas();
	INLINE void setCreateDatas(const std::string& datas);

	DECLARE_PY_MOTHOD_ARG0(pyGetClientDatas);

	/**
		After each proxy is created, a uuid is generated by the system to provide front-end re-login for identification.
	*/
	INLINE uint64 rndUUID() const;
	INLINE void rndUUID(uint64 uid);

	/** 
		Transfer the client associated with it to another proxy to associate
	*/
	void giveClientTo(Proxy* proxy);
	void onGiveClientTo(Network::Channel* lpChannel);
	void onGiveClientToFailure();
	DECLARE_PY_MOTHOD_ARG1(pyGiveClientTo, PyObject_ptr);

	/**
		File stream data download
	*/
	static PyObject* __py_pyStreamFileToClient(PyObject* self, PyObject* args);
	int16 streamFileToClient(PyObjectPtr objptr, 
		const std::string& descr = "", int16 id = -1);

	/**
		String stream data download
	*/
	static PyObject* __py_pyStreamStringToClient(PyObject* self, PyObject* args);
	int16 streamStringToClient(PyObjectPtr objptr, 
		const std::string& descr = "", int16 id = -1);

	/**
		Bind the witness
	*/
	void onGetWitness();

	/**
		Kick the client out of the server
	*/
	void kick();

	/**
		Get the client connection object of this proxy
	*/
	Network::Channel* pChannel();

protected:
	uint64 rndUUID_;
	Network::Address addr_;
	DataDownloads dataDownloads_;

	bool clientEnabled_;

	// Limit the bandwidth that the client can use per second
	int32 bandwidthPerSecond_;

	// communication encryption key default blowfish
	std::string encryptionKey;

	ProxyForwarder* pProxyForwarder_;

	COMPONENT_CLIENT_TYPE clientComponentType_;

	// datas attached to the login (not archived)
	std::string loginDatas_;

	// datas data attached to the registration (permanent archive)
	std::string createDatas_;
};

}


#ifdef CODE_INLINE
#include "proxy.inl"
#endif

#endif // OURO_PROXY_H
